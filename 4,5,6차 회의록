20.10.15 4차 회의록

디스코드 상으로 회의를 진행하였으며 single 코드에 때하여 각자 조사를 완료하였습니다.

싱글톤 패턴 정리

싱글톤 패턴(Singleton Pattern)
애플리케이션이 시작될 때 어떤 클래스가 최초 한번만 메모리를 할당하고(Static) 그 메모리에 인스턴스를 만들어 사용하는 디자인패턴.

1)생성자가 여러 차례 호출되더라도 실제로 생성되는 객체는 하나.
2)최초 생성 이후 호출된 생성자는 최초에 생성한 객체를 반환한다.
=> 싱글톤은 단 하나의 인스턴스를 생성해 사용하는 디자인 패턴이다.

싱글톤 패턴은 언제 쓰는가
1. 메모리의 낭비를 방지한다
  1)고정된 메모리 영역을 얻으면서 한번의 new 로 인스턴스를 사용하기 때문
2. 다른 클래스의 인스턴스들이 데이터를 공유하기 쉽다.
  2)싱글톤으로 만들어진 클래스의 인스턴스는 전역 인스턴스이기 때문
3.DBCP(DataBase Connection Pool)처럼 공통된 객체를 여러개 생성해서 사용할 때 
  3)(쓰레드풀, 캐시, 대화상자, 사용자 설정, 레지스트리 설정, 로그 기록 객체등)
  안드로이드 앱 같은 경우 각 액티비티나 클래스별로 주요 클래스들을 일일이 전달하기가
  번거롭기 때문에 싱글톤 클래스를 만들어 어디서나 접근하도록 설계하는 것이 편하기 때문.


장점
두 번째 이용부터는 객체 로딩 시간이 현저하게 줄어 성능이 좋아진다.

단점
싱글톤 인스턴스가 너무 많은 일을 하거나 많은 데이터를 공유시킬 경우
다른 클래스의 인스턴스들 간에 결합도가 높아져 "개방-폐쇄 원칙" 을 위배하게 된다.
=>객체 지향 설계 원칙에 어긋나며 수정이 어려워지고 테스트하기 어려워진다.

멀티쓰레드환경에서 동기화처리를 안하면 인스턴스가 두개가 생성된다든지 하는 경우가 발생할 수 있음


싱글톤 코드에 관하여 팀원들이 각자 조사하였고 게임유닛 생성을 제한하는 오픈소스 코드를 분석 하기로 결정하였습니다.
10/19 어떤식으로 코드를 분석할지 정하고 그 주 주말에 회의를 진행하려고 합니다


20.10.19 5차 회의록

디스코드 상으로 회의를 진행하였으며 
8~10주차 계획일정에 따라 이번주부터 3주간 코드를 분석 하기로 하였습니다.
코드를 3등분으로 나누어 한주씩 분석을 하기로 정하였고
팀원들 별로 코드를 분석해보고 주말회의 에서 정보를 공유 하여 8주차 코드분석을
마무리 지을 계획입니다.

2020.11.01 6차 회의록

디스코드 상으로 회의를 진행. 일전에 정한 싱글톤 패턴을 1차 까지 분석,
유닛 수, 공격 유닛, 방어  유닛의 수와 클래스를 파악했습니다.
4명 다 비슷하게 해석했으나,
그 중에서 #defined ATTAK_UNIT, PROTECT_UNIT이 가지는 수가 유닛의 개수인지
아니면  유닛을 알려주기 위한 이름으로 사용한 건지에 대한 의견이 갈렸으며
우선은 유닛의 개수로 판단하였습니다. 
